# This is the main mobile application release workflow for both nightly and beta/stable releases.

name: Build-Mobile-Release

on:
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target ("nightly"/"beta")'
        type: string
        required: true
        default: "beta"
      git-ref:
        description: "Release Git Ref(master)"
        required: true
        default: "master"
      is-draft:
        description: 'Draft Release? (Beta only, Nightly will always be a non-draft)'
        type: boolean
        required: true
        default: true
      is-pre-release:
        description: 'Pre Release? (labeled as "PreRelease")'
        type: boolean
        required: true
        default: true
 # schedule: # Every workday at the 2 P.M. (UTC) we run a scheduled nightly build
  #  - cron: '0 14 * * MON-FRI'

env:
  CLOJURE_VERSION: '1.10.1.763'
  NODE_VERSION: '16'

jobs:
  compile-android:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache directory
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8

      - name: Cache clojure deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
          key: ${{ runner.os }}-clojure-lib-${{ hashFiles('**/deps.edn') }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@3.5
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo ::set-output name=version::$pkgver

      - name: Update Nightly APP Version
        if: ${{ github.event.inputs.build-target == 'nightly' || github.event_name == 'schedule' }}
        run: |
          sed -i 's/defonce version ".*"/defonce version "${{ steps.ref.outputs.version }}"/g' src/main/frontend/version.cljs

      - name: Compile CLJS
        run: yarn install && yarn relase

      - name: Update APP Version
        run: |
          sed -i 's/"version": "0.0.1"/"version": "${{ steps.ref.outputs.version }}"/g' ./package.json
        working-directory: ./static

      - name: Prepare public Directory
        run: |
          cp -rv static public/
          rm -rvf public/static/js/publishing
          rm -rvf public/static/js/main.js.map
          rm -rvf android/app/src/main/assets/public

      - name: Sync public to Android Project
        run: npx cap sync

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Build Android
        run: |
          ./gradlew clean
          ./gradlew zipApksForRelease
        working-directory: android

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: logseq-android-apk
          path: android/app/build/outputs/apk/release/app-release-unsigned.apk
