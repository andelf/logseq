# This is the main desktop application release workflow for both nightly and beta/stable releases.

name: Build-Desktop-Release

on:
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target ("nightly"/"release")'
        type: string
        required: true
        default: "nightly"
      git-ref:
        description: "Release Git Ref"
        required: true
        default: "master"
      is-draft:
        description: 'Draft Release? '
        type: boolean
        required: true
        default: true
      is-pre-release:
        description: 'Pre Release?'
        type: boolean
        required: true
        default: true
  schedule: # Every Monday at noon (UTC) we run a scheduled nightly build
    - cron: '0 12 * * MON-FRI'

env:
  CLOJURE_VERSION: '1.10.1.763'
  NODE_VERSION: '16'

jobs:
  compile-cljs:
    runs-on: ubuntu-18.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@3.5
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver

      - name: Update APP Version
        run: |
          sed -i 's/"version": "0.0.1"/"version": "${{ steps.ref.outputs.version }}"/g' ./package.json
        working-directory: ./static

      - name: Display Package.json
        run: cat ./package.json
        working-directory: ./static

      - name: List Files
        run: ls -al
        working-directory: ./static

      - name: Cache Static File
        uses: actions/upload-artifact@v2
        with:
          name: static
          path: static

  build-linux:
    runs-on: ubuntu-18.04
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v2
        with:
          name: static
          path: static

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #     key: ${{ runner.os }}-node-modules

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Change Artifact Name For ZIP File
        run: mv static/out/make/zip/linux/x64/*-linux-x64-*.zip  static/out/make/zip/linux/x64/Logseq-linux.zip

      - name: Change Artifact Name For AppImage File
        run: mv static/out/make/*-*.AppImage  static/out/make/Logseq-linux.AppImage

      - name: Cache Artifact With ZIP format
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-linux.zip
          path: static/out/make/zip/linux/x64/Logseq-linux.zip

      - name: Cache Artifact With AppImage format
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-linux.AppImage
          path: static/out/make/Logseq-linux.AppImage

  build-windows:
    if: false
    runs-on: windows-latest
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v2
        with:
          name: static
          path: static

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v2
      #   with:
      #    path: |
      #      **/node_modules
      #    key: ${{ runner.os }}-node-modules

      - name: Deps Electron app
        run: yarn install
        working-directory: ./static

      - name: Fix Deps Electron app
        run: yarn run postinstall
        working-directory: ./static/node_modules/dugite/

      - name: Build/Release Electron app
        run: yarn electron:make
        working-directory: ./static
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Change Artifact Name
        run: Get-ChildItem  static\out\make\squirrel.windows\x64\*.exe | Rename-Item -NewName Logseq-win64.exe

      - name: List Directory
        run: dir
        working-directory: static/out/make/squirrel.windows/x64/

      - name: Cache Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-win64.exe
          path: static/out/make/squirrel.windows/x64/Logseq-win64.exe

  build-macos:
    needs: [ compile-cljs ]
    runs-on: macos-latest

    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v2
        with:
          name: static
          path: static

      - name: List Static Files
        run: ls -al ./static

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Signing By Apple Developer ID
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #     key: ${{ runner.os }}-node-modules

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static
        env:
          APPLE_ID: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Change DMG Name
        run: mv static/out/make/*.dmg static/out/make/Logseq-macos-x64.dmg

      - name: Cache Artifact DMG
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-macos-x64.dmg
          path: static/out/make/Logseq-macos-x64.dmg

      - name: ls files
        run: du -a static/out/

      - name: Change zip Name
        run: mv static/out/make/zip/darwin/x64/*.zip static/out/make/zip/darwin/x64/Logseq-macos-x64.zip

      - name: Cache Artifact ZIP
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-macos-x64.zip
          path: static/out/make/zip/darwin/x64/Logseq-macos-x64.zip

  build-macos-arm64:
    if: false
    needs: [ compile-cljs ]
    runs-on: macos-latest

    steps:
      # this is only needed temporarily
      # wait until macos-11 GA https://github.com/actions/virtual-environments/issues/2486
      # or m1 hardware https://github.com/actions/virtual-environments/issues/2187
      - name: hack osx sdk
        run: |
          if [ "$(sw_vers -productVersion | cut -d'.' -f1)" = 10 ]; then
            pushd /Library/Developer/CommandLineTools/SDKs
            sudo rm MacOSX.sdk
            sudo ln -s MacOSX11.1.sdk MacOSX.sdk
            sudo rm -rf MacOSX10.15.sdk
            ls -l
            popd
          fi

      - name: Download The Static Asset
        uses: actions/download-artifact@v2
        with:
          name: static
          path: static

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      #- name: Signing By Apple Developer ID
      #  uses: apple-actions/import-codesign-certs@v1
      #  with:
      #    p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
      #    p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #     key: ${{ runner.os }}-node-modules

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make-macos-arm64
        working-directory: ./static
        env:
          APPLE_ID: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Change DMG Name
        run: mv static/out/make/*.dmg static/out/make/Logseq-macos-arm64.dmg

      - name: Cache Artifact DMG
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-macos-arm64.dmg
          path: static/out/make/Logseq-macos-arm64.dmg

      - name: ls files
        run: du -a static/out/

      - name: Change zip Name
        run: mv static/out/make/zip/darwin/arm64/*.zip static/out/make/zip/darwin/arm64/Logseq-macos-arm64.zip

      - name: Cache Artifact ZIP
        uses: actions/upload-artifact@v2
        with:
          name: Logseq-macos-arm64.zip
          path: static/out/make/zip/darwin/arm64/Logseq-macos-arm64.zip

  release:
    #needs: [ build-macos, build-linux, build-windows, build-macos-arm64 ]
    needs: [ build-macos, build-linux ]
    runs-on: ubuntu-18.04
    steps:
      - name: Download The MacOS X64 DMG Artifact
        uses: actions/download-artifact@v2
        with:
          name: Logseq-macos-x64.dmg
          path: ./

      - name: Download The MacOS X64 ZIP Artifact
        uses: actions/download-artifact@v2
        with:
          name: Logseq-macos-x64.zip
          path: ./

      # - name: Download The MacOS ARM64 DMG Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: Logseq-macos-arm64.dmg
      #     path: ./

      # - name: Download The MacOS ARM64 ZIP Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: Logseq-macos-arm64.zip
      #     path: ./

      - name: Download The Linux Artifact In Zip format
        uses: actions/download-artifact@v2
        with:
          name: Logseq-linux.zip
          path: ./

      - name: Download The Linux Artifact In AppImage format
        uses: actions/download-artifact@v2
        with:
          name: Logseq-linux.AppImage
          path: ./

      # - name: Download The Windows Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: Logseq-win64.exe
      #     path: ./

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver

      - name: Rename files
        run: |
          mv -v ./Logseq-macos-x64.dmg logseq-darwin-x64-${{ github.event.inputs.tag-version }}.dmg
          mv -v ./Logseq-macos-x64.zip logseq-darwin-x64-${{ github.event.inputs.tag-version }}.zip
          # mv -v ./Logseq-macos-arm64.dmg logseq-darwin-arm64-${{ github.event.inputs.tag-version }}.dmg
          # mv -v ./Logseq-macos-arm64.zip logseq-darwin-arm64-${{ github.event.inputs.tag-version }}.zip
          mv -v ./Logseq-linux.AppImage logseq-linux-x64-${{ github.event.inputs.tag-version }}.AppImage
          mv -v ./Logseq-linux.zip logseq-linux-x64-${{ github.event.inputs.tag-version }}.zip
          # mv -v ./Logseq-win64.exe logseq-win-x64-${{ github.event.inputs.tag-version }}.exe

      - name: List files
        run: ls -rl

      - name: Upload build artifacts
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: |
            logseq-darwin-x64-${{ steps.ref.outpus.version }}.zip
            logseq-darwin-x64-${{ steps.ref.outpus.version }}.dmg
            logseq-linux-x64-${{ steps.ref.outpus.version }}.zip
            logseq-linux-x64-${{ steps.ref.outpus.version }}.AppImage

#           logseq-darwin-arm64-${{ steps.ref.outpus.version }}.zip
#           logseq-darwin-arm64-${{ steps.ref.outpus.version }}.dmg
#           logseq-win-x64-${{ steps.ref.outpus.version }}.exe

      - name: Create Release Draft
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ref.outpus.version }}
          name: Desktop APP ${{ steps.ref.outpus.version }} (Beta Testing)
          body: "TODO: Fill this changelog. Sorry for the inconvenience!"
          draft: ${{ github.event.inputs.is-draft }}
          prerelease: ${{ github.event.inputs.is-pre-release }}
          files: |
            logseq-darwin-x64-${{ steps.ref.outpus.version }}.zip
            logseq-darwin-x64-${{ steps.ref.outpus.version }}.dmg
            logseq-linux-x64-${{ steps.ref.outpus.version }}.zip
            logseq-linux-x64-${{ steps.ref.outpus.version }}.AppImage

#           logseq-darwin-arm64-${{ steps.ref.outpus.version }}.zip
#           logseq-darwin-arm64-${{ steps.ref.outpus.version }}.dmg
#           logseq-win-x64-${{ steps.ref.outpus.version }}.exe

